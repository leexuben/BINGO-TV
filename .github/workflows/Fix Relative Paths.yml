name: Fix Relative Paths

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  fix-paths:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: leexuben/BINGO-TV
        path: bingo-tv
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Fix relative paths script
      run: |
        python << 'EOF'
        import json
        import os

        # 配置文件路径
        SOURCE_FILE = "bingo-tv/综合影视.json"
        TARGET_FILE = "bingo-tv/综合影视.json"
        
        # 基础URL配置
        BASE_URLS = {
            "王二小": "https://raw.githubusercontent.com/leexuben/TV-BOX/refs/heads/main/tvbox/王二小/",
            "潇洒": "https://raw.githubusercontent.com/leexuben/TV-BOX/refs/heads/main/tvbox/潇洒/",
            "巧技": "https://raw.githubusercontent.com/leexuben/TV-BOX/refs/heads/main/t极狐/巧技/",
            "影视": "https://raw.githubusercontent.com/leexuben/ljlfct01.github.io/refs/heads/main/"
        }

        def fix_relative_paths(sites):
            """修复相对路径为完整路径"""
            fixed_count = 0
            
            for site in sites:
                # 修复 api 字段
                if 'api' in site and isinstance(site['api'], str) and site['api'].startswith('./'):
                    original_path = site['api']
                    # 根据jar字段判断来源
                    jar_url = site.get('jar', '')
                    base_url = None
                    
                    # 根据jar URL判断来源
                    if '王二小' in jar_url:
                        base_url = BASE_URLS['王二小']
                    elif '潇洒' in jar_url:
                        base_url = BASE_URLS['潇洒']
                    elif '巧技' in jar_url:
                        base_url = BASE_URLS['巧技']
                    elif 'ljlfct01' in jar_url:
                        base_url = BASE_URLS['影视']
                    
                    if base_url:
                        # 移除 ./ 前缀并构建完整URL
                        relative_path = original_path[2:]  # 移除 './'
                        site['api'] = base_url + relative_path
                        fixed_count += 1
                        print(f"  修复 api: {original_path} -> {site['api']}")

                # 修复 ext 字段
                if 'ext' in site and isinstance(site['ext'], str) and site['ext'].startswith('./'):
                    original_path = site['ext']
                    jar_url = site.get('jar', '')
                    base_url = None
                    
                    if '王二小' in jar_url:
                        base_url = BASE_URLS['王二小']
                    elif '潇洒' in jar_url:
                        base_url = BASE_URLS['潇洒']
                    elif '巧技' in jar_url:
                        base_url = BASE_URLS['巧技']
                    elif 'ljlfct01' in jar_url:
                        base_url = BASE_URLS['影视']
                    
                    if base_url:
                        relative_path = original_path[2:]
                        site['ext'] = base极狐 + relative_path
                        fixed_count += 1
                        print(f"  修复 ext: {original_path} -> {site['ext']}")

            return fixed_count

        def main():
            print("🚀 开始修复相对路径...")
            print("=" * 60)
            
            # 读取源文件
            try:
                with open(SOURCE_FILE, 'r', encoding='utf-8') as f:
                    data = f.read()
                
                # 解析JSON
                json_data = json.loads(data)
                
                # 检查数据结构
                if 'sites' in json_data:
                    # 对象格式：包含sites和其他字段
                    print("📊 检测到对象格式，包含sites和其他字段")
                    sites = json_data['sites']
                    other_fields = {k: v for k, v in json_data.items() if k != 'sites'}
                    
                    print(f"📊 找到 {len(sites)} 个站点")
                    print(f"📊 其他字段: {list(other_fields.keys())}")
                    
                    # 修复相对路径
                    fixed_count = fix_relative_paths(sites)
                    print(f"✅ 修复了 {fixed_count} 个相对路径")
                    
                    # 重新构建完整数据
                    result_data = {'sites': sites}
                    result_data.update(other_fields)
                    
                else:
                    # 直接是数组格式
                    print("📊 检测到数组格式")
                    sites = json_data
                    print(f"📊 找到 {len(sites)} 个站点")
                    
                    # 修复相对路径
                    fixed_count = fix_relative_paths(sites)
                    print(f"✅ 修复了 {fixed_count} 个相对路径")
                    
                    result_data = sites
                
                # 保存修复后的数据（保留原始结构）
                with open(TARGET_FILE, 'w', encoding='utf-8') as f:
                    json.dump(result_data, f, ensure_ascii=False, indent=2)
                
                print("=" * 60)
                print("📋 修复后的示例:")
                
                if isinstance(result_data, dict) and 'sites' in result_data:
                    for i, site in enumerate(result_data['sites'][:3]):
                        name = site.get('name', '未知名称')
                        key = site.get('key', '无key')
                        api = site.get('api', '无api')
                        ext = site.get('ext', '无ext')
                        print(f"  {i+1}. {name} (key: {key})")
                        if api and api.startswith('http'):
                            print(f"     api: {api}")
                        if ext and ext.startswith('http'):
                            print(f"     ext: {ext}")
                        print("     ---")
                else:
                    for i, site in enumerate(result_data[:3]):
                        name = site.get('name', '未知名称')
                        key = site.get('key', '无key')
                        api = site.get('api', '无api')
                        ext = site.get('ext', '无ext')
                        print(f"  {i+1}. {name} (key: {key})")
                        if api and api.startswith('http'):
                            print(f"     api: {api}")
                        if ext and ext.startswith('http'):
                            print(f"     ext: {ext}")
                        print("     ---")
                    
            except Exception as e:
                print(f"❌ 处理文件失败: {e}")
                return False
                
            return True

        if __name__ == "__main__":
            main()
        EOF

    - name: Commit and push changes
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        cd bingo-tv
        
        # 配置Git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/leexuben/BINGO-TV.git
        
        # 检查文件状态
        echo "=== 文件状态 ==="
        git status
        
        # 检查文件差异
        echo "=== 文件差异 ==="
        git diff 综合影视.json || echo "无差异"
        
        # 添加文件
        git add 综合影视.json
        
        # 检查是否有更改
        if git diff --cached --quiet; then
          echo "📝 没有检测到更改"
          exit 0
        fi
        
        # 提交更改
        git commit -m "Fix: Convert relative paths to absolute URLs $(date +'%Y-%m-%d %H:%M:%S')"
        
        # 推送更改
        git push origin main
        
        echo "✅ 相对路径修复完成并已推送"
