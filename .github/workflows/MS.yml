on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  merge-sites:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: leexuben/BINGO-TV
        path: bingo-tv
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: pip install requests

    - name: Run merge script
      run: |
        python << 'EOF'
        import json
        import requests
        import re
        import os

        # 源文件配置
        SOURCE_CONFIGS = [
            {
                "api_url": "https://raw.githubusercontent.com/leexuben/TV-BOX/refs/heads/main/tvbox/王二小/api.json",
                "jar_url": "https://raw.githubusercontent.com/leexuben/TV-BOX/refs/heads/main/tvbox/王二小/spider.jar"
            },
            {
                "api_url": "https://raw.githubusercontent.com/leexuben/TV-BOX/refs/heads/main/tvbox/潇洒/api.json",
                "jar_url": "https://raw.githubusercontent.com/leexuben/TV-BOX/refs/heads/main/tvbox/潇洒/spider.jar"
            },
            {
                "api_url": "https://raw.githubusercontent.com/leexuben/TV-BOX/refs/heads/main/tvbox/巧技/api.json",
                "jar_url": "https://raw.githubusercontent.com/leexuben/TV-BOX/refs/heads/main/tvbox/巧技/spider.jar"
            },
            {
                "api_url": "https://raw.githubusercontent.com/leexuben/ljlfct01.github.io/refs/heads/main/影视",
                "jar_url": "https://raw.githubusercontent.com/leexuben/ljlfct01.github.io/refs/heads/main/jar/spider.jar"
            }
        ]
        
        TARGET_FILE = "bingo-tv/综合影视.json"

        def extract_json_from_xml(content):
            try:
                json_start = content.find('{')
                json_end = content.rfind('}') + 1
                if json_start != -1 and json_end > json_start:
                    json_content = content[json_start:json_end]
                    return json.loads(json_content)
            except:
                pass
            return None

        def extract_sites_with_regex(content):
            try:
                pattern = r'"sites"\s*:\s*\[(.*?)\]'
                match = re.search(pattern, content, re.DOTALL)
                if match:
                    sites_content = match.group(1)
                    full_array = f'[{sites_content}]'
                    return json.loads(full_array)
            except:
                pass
            return []

        def extract_sites_from_content(content):
            try:
                data = json.loads(content)
                sites = data.get('sites', [])
                if sites:
                    return sites
            except:
                pass
            
            xml_data = extract_json_from_xml(content)
            if xml_data:
                sites = xml_data.get('sites', [])
                if sites:
                    return sites
            
            sites = extract_sites_with_regex(content)
            if sites:
                return sites
            
            return []

        def fetch_url_content(url):
            try:
                response = requests.get(url, timeout=30)
                response.raise_for_status()
                return response.text
            except Exception as e:
                print(f"   ❌ 获取失败: {e}")
                return None

        def add_jar_to_site(site, jar_url):
            # 如果已经有jar字段，保持不变
            if 'jar' in site and site['jar']:
                return site, False
            
            # 如果jar字段为空或没有jar字段，添加jar
            site['jar'] = jar_url
            return site, True

        def main():
            print("🚀 开始合并站点数据...")
            print("=" * 60)
            
            all_sites = []
            
            for config in SOURCE_CONFIGS:
                api_url = config["api_url"]
                jar_url = config["jar_url"]
                
                print(f"📥 处理: {api_url}")
                
                content = fetch_url_content(api_url)
                if content:
                    sites = extract_sites_from_content(content)
                    if sites:
                        jar_added = 0
                        jar_existing = 0
                        
                        for site in sites:
                            modified_site, added = add_jar_to_site(site, jar_url)
                            all_sites.append(modified_site)
                            if added:
                                jar_added += 1
                            else:
                                jar_existing += 1
                        
                        print(f"   ✅ 提取到 {len(sites)} 个站点")
                        if jar_added > 0:
                            print(f"       新增JAR: {jar_added} 个")
                        if jar_existing > 0:
                            print(f"       已有JAR: {jar_existing} 个")
                    else:
                        print(f"   ⚠️  未找到sites数据")
                else:
                    print(f"   ❌ 无法获取文件内容")
                print("-" * 40)
            
            if not all_sites:
                print("❌ 未提取到任何站点数据")
                return
            
            # 去重处理
            unique_sites = []
            seen_keys = set()
            duplicate_count = 0
            
            for site in all_sites:
                key = site.get('key', '')
                if key and key in seen_keys:
                    duplicate_count += 1
                    continue
                
                unique_sites.append(site)
                if key:
                    seen_keys.add(key)
            
            print("📊 合并统计:")
            print(f"   总站点数: {len(all_sites)}")
            print(f"   去重后站点数: {len(unique_sites)}")
            print(f"   重复站点数: {duplicate_count}")
            
            # 只保留sites数组
            result_data = {
                "sites": unique_sites
            }
            
            with open(TARGET_FILE, 'w', encoding='utf-8') as f:
                json.dump(result_data, f, ensure_ascii=False, indent=2)
            
            print("✅ 合并完成!")
            
            # 显示前3个站点的最终结构
            print(f"\n🔍 前3个站点最终结构:")
            for i, site in enumerate(unique_sites[:3]):
                print(f"   {i+1}. {json.dumps(site, ensure_ascii=False)}")

        if __name__ == "__main__":
            main()
        EOF

    - name: Configure Git and commit changes
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        cd bingo-tv
        
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/leexuben/BINGO-TV.git
        
        git fetch origin
        git pull origin main --rebase
        
        git add .
        
        if git diff --cached --quiet; then
          echo "📝 没有更改需要提交"
          exit 0
        fi
        
        git commit -m "Auto-update: Merged sites data $(date +'%Y-%m-%d %H:%M:%S')"
        git push origin main
        
        echo "✅ 更改已成功提交并推送"
